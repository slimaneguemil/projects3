##  1- CREATE Minikube K8s Cluster
##

# start cloudacademy minikube from aws community AMI (oregon) - t2.medium + EIP
#start minikube
sudo minikube start --vm-driver=none --network-plugin=cni
#check minikube is up
sudo minikube status
# configure the credentials to authenticate to the minikube cluster
[ec2-user@ip-172-31-35-156 ~]$ sudo cp /root/.minikube/ca.crt /home/ec2-user/.kube/
[ec2-user@ip-172-31-35-156 ~]$ sudo cp /root/.minikube/client.crt /home/ec2-user/.kube/
[ec2-user@ip-172-31-35-156 ~]$ sudo cp /root/.minikube/client.key /home/ec2-user/.kube/

#sudo chown -R ec2-user:ec2-user /home/ec2-user/.kube/

#capture minikube ip ti Ip variable
IP=`sudo minikube ip`


#create  ~/.kube/config  see file in source

#now check connection is working with the cluster
kubectl get nodes


# 2- INSTALL CILIUM - L4/L7 Netwok policies
#
#
#  check link : https://cilium.readthedocs.io/en/stable/gettingstarted/minikube/

kubectl create -f https://raw.githubusercontent.com/cilium/cilium/1.6.3/install/kubernetes/quick-install.yaml
kubectl -n kube-system get pods --watch

# 3- clone repositories and update environment vars
#

mkdir ~/voteapp && cd ~/voteapp

git clonoe folowing links :

https://github.com/cloudacademy/voteapp-frontend-react
https://github.com/cloudacademy/voteapp-api-go
https://github.com/cloudacademy/voteapp-k8s

#check whre is store  nip ip.
grep -iRl "X.X.X.X.nip.io"  ./

# provide wildcare DNS : nip.io
#replace default variable sin file
EXTIP=`curl -s ifconfig.co`
echo $EXTIP
#replace 'X.X.X.X.nip.io' by $EXTIP.nip.io
egrep -lRZ 'X.X.X.X.nip.io' . | xargs -0 -l sed -i -e "s/X.X.X.X.nip.io/$EXTIP.nip.io/g"

##  4- install front-end
##

#goto webfront git folder , to install node_modules
yarn install
#minifize and create build folder
yarn build
docker build -t cloudacademy/frontend:v1

##  5- install api
##
# goto folder create by git
cat go mod
#create api folder
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o api
docker build -t cloudacadem/api:v1 .

#create namespae

kubectl apply -f ./namespace/namespace.yaml
kubectl config set-context --current --namespace=cloudacademy

#sudo yum install -y tmux
tmux
ctrl+b then "  -> to split pan in 2 horizontaly
watch -n2 kubectl get all,pv,pvc

##  6- create mongo
##
 watch -n2 kubectl get all,pv,pvc
 kubectl apply -f ./database/mongo.statefulset.yaml
 #connect to mongo-o pod
 kubectl exec -it mongo-0 bash

 #check to connect to all pods
  mongo mongo-0.mongo
  mongo mongo-1.mongo
  mongo mongo-2.mongo

 #if all ok then jump on first pod and provozion data
  mongo mongo-2.mongo
  rs.initiate()
  #chek the value in me field and copy it then past in as parameter
  rs.add("mongo-1:27017")
  rs.add("mongo-1.mongo:27017")

  rs0:PRIMARY> var cfg= rs.conf()
  cfg.members[0].host= "mongo-0.mongo:27017"
  rs0:PRIMARY> cfg.members[0].host
output->  mongo-0:27017
rs.reconfig(cfg, {force:true});

#exit pod and reenter again

 kubectl exec -it mongo-0 bash
 mongo
 rs.status()
#populate data
 use langdb;


 rs0:PRIMARY> db.languages.insert({"name": "go", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 16, "compiled" : true, "homepge" : "https://golang.org", "download" : "https://golang/dl", "votes" :0 }})
 WriteResult({ "nInserted" : 1 })
 rs0:PRIMARY> db.languages.insert({"name": "java", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 16, "compiled" : true, "homepge" : "https://golang.org", "download" : "https://golang/dl", "votes" :0 }})
 WriteResult({ "nInserted" : 1 })
 rs0:PRIMARY> db.languages.insert({"name": "nodejs", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 16, "compiled" : true, "homepge" : "https://golang.org", "download" : "https://golang/dl", "votes" :0 }})
 WriteResult({ "nInserted" : 1 })
 rs0:PRIMARY> show collections;

rs0:PRIMARY> db.languages.find()
