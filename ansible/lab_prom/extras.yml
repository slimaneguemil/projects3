---
- name: Install python
  become: true
  hosts: all
  gather_facts: false
  tasks:
  - name: Install python
    raw: "apt update && apt install -y python"

#- name: Install docker
#  hosts: influxdb
#  roles:
#  - mongrelion.docker
#  tasks:
#  - name: Ensure cAdvisor is started
#    docker_container:
#      name: cadvisor
#      image: google/cadvisor:latest
#      restart_policy: always
#      memory: 256m
#      command: "--disable_metrics disk,tcp,udp --housekeeping_interval 5s"
#      labels:
#        namespace: management
#      ports:
#        - "8080:8080"
#      volumes:
#        - "/:/rootfs:ro"
#        - "/var/run:/var/run:rw"
#        - "/sys:/sys:ro"
#        - "/var/lib/docker:/var/lib/docker:ro"
#        - "/etc/localtime:/etc/localtime:ro"
#      log_driver: syslog
#      log_options:
#        syslog-facility: local0
#        tag: cadvisor
#    retries: 5
#    register: result
#    until: result is succeeded
#  vars:
#    docker_default_config: {}
#    docker_version: "latest"
#    docker_compose: false
#
#- name: Configure persistent data store
#  hosts: influxdb
#  tasks:
#  - name: Retain influxdb container
#    docker_container:
#      name: influx
#      state: absent
#    when: ansible_date_time.day == "01"
#  - name: Retain influxdb data
#    docker_volume:
#      name: influxdb
#      state: absent
#    when: ansible_date_time.day == "01"
#  - name: Ensure influxdb has a place to store data
#    docker_volume:
#      name: influxdb
#      state: present
#  - name: Start influxdb container
#    docker_container:
#      name: influx
#      image: influxdb:alpine
#      state: started
#      restart_policy: always
#      labels:
#        namespace: database
#      ports:
#        - "8086:8086"
#      volumes:
#        - "influxdb:/var/lib/influxdb"
#      env:
#        INFLUXDB_HTTP_AUTH_ENABLED: "true"
#        INFLUXDB_ADMIN_USER: "{{ influxdb_user }}"
#        INFLUXDB_ADMIN_PASSWORD: "{{ influxdb_password }}"
#        INFLUXDB_DB: "{{ influxdb_db }}"
#    retries: 5
#    register: result
#    until: result is succeeded

- name: Setup HTTP server
  become: true
  hosts: web
  roles:
  - antoiner77.caddy
  pre_tasks:
  - name: Ensure webdirs exists
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - /var/www/demo
      - /var/www/demo/img
      - /var/www/presentation
  - name: Ensure portal site exists
    copy:
      src: index.html
      dest: /var/www/demo/index.html
  - name: Copy images
    copy:
      src: "img/{{ item }}"
      dest: "/var/www/demo/img/{{ item }}"
    with_items:
    - logo.png
    - digitalocean.png
  vars:
    port_mapping:
      grafana: 3000
      prometheus: 9090
      alertmanager: 9093
      node: 9100
      blackbox: 9115
      snmp: 9116
    caddy_update: false
    caddy_systemd_capabilities_enabled: true
    caddy_features: http.prometheus
    caddy_config: |
      {{ ansible_host }} {
        ext .html
        root /var/www/demo/
        prometheus
      }
      :9091 {
          proxy / localhost:9090 {
                  transparent
              }
          errors stderr
          tls off
      }

- name: Setup random number exporter
  become: true
  hosts: web
  tasks:
#  - name: Locally build random_exporter
#    shell: |
#      go get -u github.com/prometheus/client_golang/examples/random
#      mv $GOPATH/bin/random /tmp/random_exporter
#    args:
#      creates: /tmp/random_exporter
#    delegate_to: localhost
#    run_once: true
#  - name: Copy random_exporter binary
#    copy:
#      src: /tmp/random_exporter
#      dest: /usr/local/bin/random_exporter
#      owner: root
#      group: root
#      mode: 0755
#    notify: random_exporter restart
#  - name: Copy systemd service file
#    copy:
#      dest: /etc/systemd/system/random_exporter.service
#      mode: 0644
#      content: "{{ random_exporter_systemd_service }}"
#    notify: random_exporter restart
#  handlers:
#  - name: random_exporter restart
#    systemd:
#      name: random_exporter
#      state: started
#      daemon_reload: true
#      enabled: true
#  vars:
#    random_exporter_systemd_service: |
#      # Ansible managed
#      [Unit]
#      Description=Random Metrics Exporter
#      After=network.target
#      [Service]
#      Type=simple
#      User=nobody
#      Group=nogroup
#      ExecStart=/usr/local/bin/random_exporter -listen-address=:8999
#      SyslogIdentifier=random_exporter
#      Restart=always
#      [Install]
#      WantedBy=multi-user.target
